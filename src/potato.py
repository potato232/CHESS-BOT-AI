from random import randint


def get_location(_l):
    if type(_l) is tuple:
        return f'{"ABCDEFGH"[_l[0]]}{_l[1]+1}'
    return char.get(_l[0]), int(_l[1]) - 1


def sort_array(array: tuple) -> tuple:
    array = list(array)
    array.sort()
    return tuple(array)


RandomArray = (lambda r1, r2: [randint(1, r1) for _ in [0]*randint(1, r2)])
ReverseArray = (lambda array: tuple([array[-(n+1)] for n in range(len(array))]))
printArray2D = (lambda array: [[print(k) for k in i] for i in array])
copy_list = (lambda mylist: [i for i in mylist])
func = (lambda array: sum(array) / len(array))


KING, QUEEN, ROOK = "King", "Queen", "Rook"
WHITE, BLACK = "white", "black"
BISHOP = "Bishop"
KNIGHT = "Knight"
NOTING = ""
PAWN = "Pawn"

white_pieces = ('♚', '♛', '♜', '♞ ', '♝', '♟')
black_pieces = ('♔', '♕', '♖', '♘ ', '♗ ', '♙')


def clean_board():
    clean_board_ = (
        [NOTING] * 8, [NOTING] * 8, [NOTING] * 8, [NOTING] * 8,
        [NOTING] * 8, [NOTING] * 8, [NOTING] * 8, [NOTING] * 8,
    )
    return clean_board_


char = {'A': 0, 'B': 1, 'C': 2, 'D': 3,
        'E': 4, 'F': 5, 'G': 6, 'H': 7}

letters = "ABCDEFGH"

# - #
kingMove = ((+1, +1), (+0, 1), (-1, +1), (+1, +0),
            (-1, +0), (1, -1), (+0, -1), (-1, -1))

rookMove = (
        ((+1, 0), (+2, 0), (+3, 0), (+4, 0), (+5, 0), (+6, 0), (+7, 0)),
        ((+0, 1), (+0, 2), (+0, 3), (+0, 4), (+0, 5), (+0, 6), (+0, 7)),
        ((-1, 0), (-2, 0), (-3, 0), (-4, 0), (-5, 0), (-6, 0), (-7, 0)),
        ((0, -1), (0, -2), (0, -3), (0, -4), (0, -5), (0, -6), (0, -7)),
)

bishopMove = (
        ((+1, +1), (+2, +2), (+3, +3), (+4, +4), (+5, +5), (+6, +6), (+7, +7)),
        ((-1, +1), (-2, +2), (-3, +3), (-4, +4), (-5, +5), (-6, +6), (-7, +7)),
        ((+1, -1), (+2, -2), (+3, -3), (+4, -4), (+5, -5), (+6, -6), (+7, -7)),
        ((-1, -1), (-2, -2), (-3, -3), (-4, -4), (-5, -5), (-6, -6), (-7, -7)),
)

knightMove = (
        (+1, 2), (-1, 2), (1, -2), (-1, -2),
        (+2, 1), (2, -1), (-2, 1), (-2, -1),
)

pawnMoveW, pawnAttackW = ((0, +1), (0, +2)), ((+1, +1), (-1, 1))
pawnMoveB, pawnAttackB = ((0, -1), (0, -2)), ((-1, -1), (1, -1))

# - #

strengthWhite = {
    KING: +90.00, QUEEN: +9.00, ROOK: +5.0,
    KNIGHT: +3.0, BISHOP: +3.5, PAWN: +1.0,
}

strengthBlack = {
    KING: -90.00, QUEEN: -9.00, ROOK: -5.0,
    KNIGHT: -3.0, BISHOP: -3.5, PAWN: -1.0,
}

pawnEvalWhite = (
        (0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0),
        (5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0),
        (1.0,  1.0,  2.0,  3.0,  3.0,  2.0,  1.0,  1.0),
        (0.5,  0.5,  1.0,  2.5,  2.5,  1.0,  0.5,  0.5),
        (0.0,  0.0,  0.0,  2.0,  2.0,  0.0,  0.0,  0.0),
        (0.5, -0.5, -1.0,  0.0,  0.0, -1.0, -0.5,  0.5),
        (0.5,  1.0, 1.0,  -2.0, -2.0,  1.0,  1.0,  0.5),
        (0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0),
)

pawnEvalBlack = ReverseArray(pawnEvalWhite)

knightEval = (
        (-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0),
        (-4.0, -2.0,  0.0,  0.0,  0.0,  0.0, -2.0, -4.0),
        (-3.0,  0.0,  1.0,  1.5,  1.5,  1.0,  0.0, -3.0),
        (-3.0,  0.5,  1.5,  2.0,  2.0,  1.5,  0.5, -3.0),
        (-3.0,  0.0,  1.5,  2.0,  2.0,  1.5,  0.0, -3.0),
        (-3.0,  0.5,  1.0,  1.5,  1.5,  1.0,  0.5, -3.0),
        (-4.0, -2.0,  0.0,  0.5,  0.5,  0.0, -2.0, -4.0),
        (-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0),
)

bishopEvalWhite = (
        (-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0),
        (-1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0),
        (-1.0,  0.0,  0.5,  1.0,  1.0,  0.5,  0.0, -1.0),
        (-1.0,  0.5,  0.5,  1.0,  1.0,  0.5,  0.5, -1.0),
        (-1.0,  0.0,  1.0,  1.0,  1.0,  1.0,  0.0, -1.0),
        (-1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0, -1.0),
        (-1.0,  0.5,  0.0,  0.0,  0.0,  0.0,  0.5, -1.0),
        (-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0),
)

bishopEvalBlack = ReverseArray(bishopEvalWhite)

rookEvalWhite = (
        (+0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, +0.0),
        (+0.5,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0, +0.5),
        (-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5),
        (-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5),
        (-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5),
        (-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5),
        (-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5),
        (+0.0,  0.0, 0.0,  0.5,  0.5,  0.0,  0.0,  +0.0),
)

rookEvalBlack = ReverseArray(rookEvalWhite)

evalQueen = (
        (-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0),
        (-1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0),
        (-1.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0),
        (-0.5,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5),
        (+0.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5),
        (-1.0,  0.5,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0),
        (-1.0,  0.0,  0.5,  0.0,  0.0,  0.0,  0.0, -1.0),
        (-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0),
)

kingEvalWhite = (
        (-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0),
        (-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0),
        (-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0),
        (-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0),
        (-2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0),
        (-1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0),
        (+2.0,  2.0,  0.0,  0.0,  0.0,  0.0,  2.0,  2.0),
        (+2.0,  3.0,  1.0,  0.0,  0.0,  1.0,  3.0,  2.0),
)

kingEvalBlack = ReverseArray(kingEvalWhite)


# - test - #
def __test__():
    for i in rookEvalBlack:
        print(i)


if __name__ == '__main__':
    __test__()
